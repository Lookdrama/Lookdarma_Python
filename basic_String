'''
    "字符串的驻留机制"：
      定义：对相同的字符串只保留一份拷贝，后续创建相同字符串时，不会开辟新的空间，而是把该字符串的地址赋给新创建的变量
    驻留机制的几种情况（交互模式）
        字符串的长度为0或1时
        符合标识符的字符串
        字符串旨在编译时进行驻留，而非运行时
        [-5，256]之间的整数数字
'''
a='Python'
b="Python"
c='''Python'''
print(a,id(a))
print(b,id(b))
print(c,id(c))

'''
    字符串的查询操作：
        index():查找子串substr第一次出现的位置，如果查找的子串不存在，则抛出ValueError
        rindex():查找子串substr最后一次出现的位置，如果查找的子串不存在，则抛出ValueError
        find():查找子串substr第一次出现的位置，如果查找的子串不存在，则抛出-1
        rfind:查找子串substr最后一次出现的位置，如果查找的子串不存在，则抛出-1
'''
s="HelloWorld"
print(s.index("l"))
print(s.rindex("l"))
print(s.find("l"))
print(s.rfind("l"))

'''
    字符串的大小写转换操作：(会产生新的字符串   )
        upper():把字符串中所有字符都转成大写字母
        lower():把字符串中所有字符都转成小写字母
        swapcase():把字符串中所有小写字符都转成大写字母，把字符串中所有大写字符都转成小写字母
        capitalize():把字符串中第一个字符都转成大写字母，其余字符转换为小写
        title():把每个单词的第一个字符都转成大写字母，其余字符转换为小写
'''
s="Hello World"
a=s.upper()
print(a)
a=s.lower()
print(a)
print(s.swapcase())
print(s.capitalize())
print(s.title())

'''
    字符串内容对齐操作：
        center()：居中对齐，第一个指定宽度，第二个指定填充符(默认为空格)
        ljust()：左对齐，第一个指定宽度，第二个指定填充符(默认为空格)
        rjust():右对齐，第一个指定宽度，第二个指定填充符(默认为空格)
        zfill():右对齐，第一个指定宽度,用0进行填充
'''
s="Hello World"
print(s.center(20,"*"))
print(s.ljust(20,"*"))
print(s.rjust(20,"*"))
print(s.zfill(20))
print('-8910'.zfill(10))

'''
    字符串的劈分操作：返回值为一个列表
        split():从左侧开始分，默认从空格分，可用sep=“|”在指定分隔位置，可用maxsplit来指定最大劈分次数  
        rsplit():从右侧开始分，默认从空格分，可用sep=“|”在指定分隔位置 ，可用maxsplit来指定最大劈分次数  
'''
s="Hello World"
lst=s.split()
print(lst)
s1="Hello|World| Python"
print(s1.split(sep='|'))
print(s1.split(sep='|',maxsplit=1))

'''
    判断字符串操作：
        isidentifer():判断指定的字符串是不是合法的标识符
        isspace():判断指定的字符串是否全部由空白字符组成（回车、换行、水平制表符）
        isalpha():判断指定的字符串是否由十进制的数字组成
        isnumeric():判断指定的字符串是否全部由数字组成（该数字中文，Ⅱ都可）
        isalnum():判断指定字符串是否全部由字母和数字组成
'''

'''
    字符串替换：replace(“被替换的子串”，“替换子串的字符串”，最大替换次数)
    字符串的合并： join()：将列表或元组中的字符串合并成一个字符串
'''
s="hello Python Python"
print(s.replace("Python","Java"))
print(s.replace("Python","Java",1))

'''
    格式化字符串两种方式：
    （1）%作为占位符
    （2）{}作为占位符
    （3）f-string
'''
name="ljx"
age=20
print('my name is %s,age is %d' % (name,age))
print('my name is {0}s,age is {1}'.format(name,age))
print(f'my name is {name},age is {age}')

'''
    字符串的编码转换
    编码：将字符串转换为二进制数据（bytes）
    解码：将bytes类型的数据转换为字符串类型
'''
s='梁建鑫'
#编码
print(s.encode(encoding='GBK')) #在GBK这种编码格式中，一个中文占两个字节
print(s.encode(encoding='UTF-8')) #在UTF-8这种编码格式中，一个中文占三个字节

#解码,byte代表就是一个二进制数据
byte=s.encode(encoding='GBK')
print(byte.decode(encoding='GBK'))
byte=s.encode(encoding='UTF-8')
print(byte.decode(encoding='UTF-8'))
